warnings()
modelGBM <- train(x=training[,-53], y=training$classe, method="gbm")
load("traincleaned.Rda")
cor(train)
cor(train[,1],train[,2])
pairs(train)
?subsets
?t
?pairs
?comn
?combn
combn(3,4)
combn(3,2)
combn(4,2)
combn(5,2)
combn(letters[1:4],2)
combn(training,2)
combn(names(training),2)
str(combn(names(training),2))
str(combn(names(training),2, simplify=TRUE))
str(combn(names(training),2, simplify=FALSE))
combn(names(training), 2, simplify=FALSE)
pairs <- combn(names(training), 2, simplify=FALSE)
pairs[1]
pairs[2]
pairs[[2]]
str(pairs)
lapply(pairs,print)
training$"classe"
pairs[1]
pairs[1][2]
pairs[1][1]
pairs[1][1][1]
pairs[[1]]
pairs[[1]][1]
pairs[[1]][2]
pairs[[1]][2]
length(pairs)
pairwiseCor <- data.frame(Column1=rep(0,length(pairs)), Column2=Column1, Cor=Column1)
rep(0,10)
pairwiseCor <- data.frame(Column1=rep(0,length(pairs)), Column2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
str(pairwiseCor)
cor(training[,2],training$classe)
?cor
cor(training[,2],training$classe, use="everything")
cor(training[,2],training$classe, use="na.or.complete")
cor(training[,2],training$classe, use="all.obs")
cor(training[,-53])
pairs[[1]]
?paste
paste(1:12)
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe$pairs[[i]][1], dataframe$pairs[[i]][2]))
}
}
pairwiseCor(training[,-53])
training$pairs[[1]][1]
pairs[[1]][1]
training$(pairs[[1]][1])
training$return(pairs[[1]][1])
training$print(pairs[[1]][1])
training[,pairs[[1]][1]]
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
}
pairwiseCor(training[,-53])
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
return df
}
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
return df;
}
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
print(df)
}
pairwiseCor(training[,-53])
df
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
answer <- df
}
pairwiseCor(training[,-53])
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
return(df)
}
pairwiseCor(training[,-53])
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
pairwiseCor <<- df
}
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]))
}
pairwiseCorDF <<- df
pairwiseCorDF
}
pairwiseCor(training[,-53])
xtables(cor(training[,-53]))
?lower.tri
(m2 <- matrix(1:20, 4, 5))
lower.tri(m2)
m2[lower.tri(m2)] <- NA
m2
?preprocessing
?preProcessing
library(caret)
?preProcess
pairwiseCorDf[order(pairwiseCorDF$Cor), decreasing=TRUE,]
pairwiseCorDF[order(pairwiseCorDF$Cor), decreasing=TRUE,]
pairwiseCorDF[order(pairwiseCorDF$Cor, decreasing=TRUE),]
str(pairwiseCorDF)
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
}
pairwiseCorDF <- df
pairwiseCorDF <<- pairwiseCorDF[order(pairwiseCorDF$Cor, decreasing=TRUE),]
pairwiseCorDF
}
pairwiseCor(training[,-53])
head(pairwiseCorDF)
head(pairwiseCorDF, 15)
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <<- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
pairwiseCorDF
}
pairwiseCor(training[,-53])
head(pairwiseCorDF, 15)
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <<- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
row.names(pairwiseCorDF) <- 1:length(pairs)
pairwiseCorDF
}
pairwiseCor(training[,-53])
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <<- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
#row.names(pairwiseCorDF) <- 1:length(pairs)
pairwiseCorDF
}
pairwiseCor(training[,-53])
pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <<- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
#row.names(pairwiseCorDF) <- 1:length(pairs)
#pairwiseCorDF
}
pairwiseCor(training[,-53])
pairwiseCorDF
rm(pairwiseCorDF)
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
row.names(pairwiseCorDF) <- 1:length(pairs)
pairwiseCorDF <<- pairwiseCorDF
pairwiseCorDF
}
pairwiseCor(training[,-53])
head(pairwiseCorDF)
train <- read.csv("pml-training.csv", header=TRUE)
test <- read.csv("pml-testing.csv", header=TRUE)
## Finds number of NA values in each column
numOfNAs <- 1:dim(train)[2]
for(i in 1:dim(train)[2]){
numOfNAs[i] <- sum(is.na(train[,i]))
}
## Print out the results
table(numOfNAs)
## Subset to exclude the columns that primarily consist of NA values, and do this for test as well
train <- train[,numOfNAs==0]
test <- test[,numOfNAs==0]
## Display the first few column classes
str(train[,1:8])
## Remove the date columns and "X" column
train <- train[,-c(1, 3, 4, 5)]
test <- test[,-c(1, 3, 4, 5)]
## Creates a logical vector telling which columns are of the class "integer"
colIsInt <- sapply(train, class)=="integer"
## Goes along the integer columns and makes them numeric
train[,colIsInt] <- lapply(train[,colIsInt],as.numeric)
test[,colIsInt] <- lapply(test[,colIsInt],as.numeric)
## Displays the number of columns with the class "factor" and "numeric"
table(sapply(train,class))
## Finds number of "" values in each column
numOfBlanks <- 1:dim(train)[2]
for(i in 1:dim(train)[2]){
numOfBlanks[i] <- sum("" == train[,i])
}
## Print out the results
numOfBlanks
colClass <- sapply(train,class)
quickcheck <- data.frame(numOfBlanks,colClass)
quickcheck
## We use just the 3rd to the 35th value because the 1st, 2nd, and 36th are ones we want to keep
colIsBadFactor <- grep("factor",colClass)[3:35]
## Subsetting out the "factor" columns that are full of blanks
train <- train[,-colIsBadFactor]
test <- test[,-colIsBadFactor]
## Names of the first 3 columns
names(train[,1:3])
## What's in these columns
table(train$user_name)
table(train$new_window)
table(train$num_window[1:500])
train <- train[,-c(1:3)]
test <- test[,-c(1:3)]
pairwiseCor <- function(dataframe){
pairs <- combn(names(dataframe), 2, simplify=FALSE)
df <- data.frame(Vairable1=rep(0,length(pairs)), Variable2=rep(0,length(pairs)),
AbsCor=rep(0,length(pairs)), Cor=rep(0,length(pairs)))
for(i in 1:length(pairs)){
df[i,1] <- pairs[[i]][1]
df[i,2] <- pairs[[i]][2]
df[i,3] <- round(abs(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]])),4)
df[i,4] <- round(cor(dataframe[,pairs[[i]][1]], dataframe[,pairs[[i]][2]]),4)
}
pairwiseCorDF <- df
pairwiseCorDF <- pairwiseCorDF[order(pairwiseCorDF$AbsCor, decreasing=TRUE),]
row.names(pairwiseCorDF) <- 1:length(pairs)
pairwiseCorDF <<- pairwiseCorDF
pairwiseCorDF
}
pairwiseCor(train[,-53])
head(pairwiseCorDF, n=20)
head(pairwiseCorDF, n=30)
## Partition the training data into (strictly) training and cross validation
inTrain <- createDataPartition(train$classe, p=.75, list=FALSE)
training <- train[inTrain,]
crossval <- train[-inTrain,]
## Remove the original training dataframe so we do not get confused later
rm(train)
modelRF <- train(x=preProcess(training[,-53],pcaComp=5), y=training$classe, method="rf")
preProcess(training[,-53],pcaComp=5)
preprocessed <- preProcess(training[,-53],pcaComp=5)
preprocessed
summary(preprocessed)
preprocessed <- preProcess(training[,-53])
preprocessed
str(preprocessed)
?prcomp
modelRF <- train(x=training[,-53], y=training$classe, method="rf", preProcess="pca")
preProc <- preProcess(training[,-53], method="pca", pcaComp=15)
preProc
summary(preProc)
predict(preProc, training[,-53])
trainingPC <- predict(preProc, training[,-53])
modelRF <- train(x=trainingPC, y=training$classe, method="rf")
str(trainingPC)
modelTree <- train(x=trainingPC, y=training$classe, method="rpart")
modelTree
modelLDA <- train(x=trainingPC, y=training$classe, method="lda")
modelLDA
modelNN <- train(x=trainingPC, y=training$classe, method="nnet")
modelNN
preProc <- preProcess(training[,-53], method="pca", pcaComp=30)
trainingPC <- predict(preProc, training[,-53])
modelNN <- train(x=trainingPC, y=training$classe, method="nnet")
modelNN
modelLDA <- train(x=trainingPC, y=training$classe, method="lda")
modelTree <- train(x=trainingPC, y=training$classe, method="rpart")
modelTree
modelRF <- train(x=trainingPC, y=training$classe, method="rf")
modelRF <- train(x=trainingPC, y=training$classe, method="rf", trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE,verboseIter = TRUE))
modelRF
?prcomp
?preProcess
preProcess(training, method="pca", thresh=.90)
preProcess(training[,-53], method="pca", thresh=.90)
preProcess(training[,-53], method="pca", thresh=.95)
modelLDA
modelNN
modelTree
## caret package
library(caret)
## set seed
set.seed(1234)
## Read in the pre-cleaned data
## Data was cleaned by MLcourseProjectCleaning.R
load("traincleaned.Rda")
load("testcleaned.Rda")
## Partition the training data into (strictly) training and cross validation
inTrain <- createDataPartition(train$classe, p=.75, list=FALSE)
training <- train[inTrain,]
crossval <- train[-inTrain,]
## Remove the original training dataframe so we do not get confused later
rm(train)
preProcess(training[,-53], method="pca", thresh=.95)
preProcTraining <- preProcess(training[,-53], method="pca", pcaComp=25)
preProcCrossVal <- preProcess(crossval[,-53], method="pca", pcaComp=25)
preProcTest <- preProcess(test[,-53], method="pca", pcaComp=25)
trainingPC <- predict(preProcTraining, training[,-53])
crossvalPC <- predict(preProcCrossVal, crossval[,-53])
testPC <- predict(preProcTest, test[,-53])
preProcess(test[,-53], method="pca", pcaComp=25)
preProcess(test[,-53], method="pca", pcaComp=25)
preProcess(test[,-53], method="pca")
preProcess(crossval[,-53], method="pca", pcaComp=25)
preProcess(crossval[,-53], method="pca")
preProc <- preProcess(training[,-53], method="pca", pcaComp=25)
trainingPC <- predict(preProc, training[,-53])
crossvalPC <- predict(preProc, crossval[,-53])
testPC <- predict(preProc, test[,-53])
rm(inTrain)
rm(preProcCrossVal)
rm(preProcTraining)
preProc <- preProcess(training[,-53], method="pca", pcaComp=25)
trainingPC <- predict(preProc, training[,-53])
crossvalPC <- predict(preProc, crossval[,-53])
testPC <- predict(preProc, test[,-53])
rm(preProc)
## Random forest, with some extra parameters passed to help with the speed
modelRF <- train(x=trainingPC, y=training$classe, method="rf", trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE, verboseIter = FALSE))
## Neural network
modelNN <- train(x=trainingPC, y=training$classe, method="nnet")
plot(training$class ~ trainingPC[,1])
head(trainingPC[,1])
?plot
plot(training$class ~ trainingPC[,1], type="p")
plot(training[,2] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,2] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,3] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,4] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,5] ~ trainingPC[,1], type="p", col=training$classe)
6
plot(trainingPC[,6] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,3] ~ trainingPC[,2], type="p", col=training$classe)
plot(modelRF)
modelRF
modelNN
plot(trainingPC[,2] ~ trainingPC[,1], type="p", col=training$classe)
plot(trainingPC[,2] ~ trainingPC[,1],
type="p",
col=training$classe,
xlab="Principal Component 1",
ylab="Principal Component 2",
main= "Plot of two Principal Components, colored by Classe")
?confusion matrix
?confusionMatrix
confusionMatrix(predict(modelNN, crossvalPC), crossval$classe)
?confusionMatrix
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)
str(confusionMatrix(predict(modelRF, crossvalPC), crossval$classe))
summary(confusionMatrix(predict(modelRF, crossvalPC), crossval$classe))
print(confusionMatrix(predict(modelRF, crossvalPC), crossval$classe))
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)[[1]]
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)[1]
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)[[1]][1]
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)[2]
confusionMatrix(predict(modelRF, crossvalPC), crossval$classe)[2:6]
plot(predict(modelRF, crossvalPC), crossval$classe)
plot(predict(modelRF, crossvalPC), crossval$classe, col=crossval$classe)
plot(predict(modelRF, crossvalPC), crossval$classe, col=c("red","blue","green","black","orange")
)
plot(predict(modelRF, crossvalPC), crossval$classe, col=c("red","blue","green","grey","orange")
)
plot(predict(modelRF, crossvalPC), crossval$classe,
col=c("red","blue","green","grey","orange"),
xlab="Predicted Classe",
ylab="True Classe",
main="Plot of True Class by Predicted Classe")
predict(modelRF, testPC)
answers <- predict(modelRF, testPC)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
?pbinom
pbinom(x=c(1:20), size=20, prob=.97)
pbinom(q=c(1:20), size=20, prob=.97)
plot(0:20, pbinom(q=c(1:20), size=20, prob=.97))
plot(0:20, pbinom(q=c(0:20), size=20, prob=.97))
?plot
plot(0:20, pbinom(q=c(0:20), size=20, prob=.97), type="h")
plot(0:20, pbinom(q=c(0:20), size=20, prob=.97), type="s")
dbinom(0:20, size=20, prob=.97)
plot(0:20, dbinom(0:20, size=20, prob=.97), type="s")
plot(10:20, dbinom(10:20, size=20, prob=.97), type="s")
plot(15:20, dbinom(15:20, size=20, prob=.97), type="s")
plot(15:20, dbinom(15:20, size=20, prob=.97), type="h")
plot(15:20, dbinom(15:20, size=20, prob=.97), type="h", lwd=2)
plot(15:20, dbinom(15:20, size=20, prob=.97), type="h", lwd=10)
plot(15:20, dbinom(15:20, size=20, prob=.97), type="h", lwd=15)
plot(0:20, dbinom(0:20, size=20, prob=.9788), type="h", lwd=15)
round(dbinom(19, 20, .9788), 3)*100
plot(0:20, dbinom(0:20, size=20, prob=.9788),
type="h", lwd=15, xlab="Number of questions answered correctly",
ylab="Chance of that occuring",
main="Density plot for answers correct out of 20, p=.9788")
## Plot of binomial distribution for questions to get right out of 20
plot(0:20, dbinom(0:20, size=20, prob=.9788),
type="h", lwd=15, xlab="Number of questions answered correctly",
ylab="Chance of that occuring",
main="Binomial density plot for answers correct out of 20, p=.9788")
plot(0:20, dbinom(0:20, size=20, prob=.9788),
type="h", lwd=15, xlab="Number of questions answered correctly",
ylab="Chance of that occuring",
main="Binomial density plot for answers correct out of 20",
sub="Probability of success is .9788")
modelNN <- train(x=trainingPC, y=training$classe, method="nnet", verbose=FALSE, verboseIter=FALSE)
modelNN <- train(x=trainingPC, y=training$classe, method="nnet", trControl= trainControl(verboseIter=FALSE))
